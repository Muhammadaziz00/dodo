from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv
import logging
import time
import os

from buttons import loc_button, num_button, inline_button1, inline_button2, inline_button3
from databases import DataBaseCustomers

db = DataBaseCustomers()
connect = db.connect
db.connect_db()



load_dotenv('.env')

bot = Bot(os.environ.get('TOKEN'))
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands='start')
async def start(message:types.Message):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}')
    await message.answer("–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ –Ω–∞ –ø–∏—Ü—Ü—É.\n\n–ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!!!", reply_markup=inline_button1)
    cursor = connect.cursor()
    cursor.execute(f'SELECT user_id FROM customers WHERE user_id = {message.from_user.id};')
    result = cursor.fetchall()
    if result == []:
        cursor.execute(f"INSERT INTO customers VALUES ('{message.from_user.first_name}', '{message.from_user.last_name}', '{message.from_user.username}', '{message.from_user.id}', 'None');")
    connect.commit()

@dp.callback_query_handler(lambda call : call)
async def inline(call):
    if call.data == 'send_number':
        await get_number(call.message)
    elif call.data == 'send_location':
        await get_location(call.message)
    elif call.data == 'take_order':
        await get_order(call.message)

@dp.message_handler(commands='number')
async def get_number(message:types.Message):
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–≤–æ–µ–≥–æ –Ω–æ–º–µ—Ä–∞.', reply_markup=num_button)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def add_number(message:types.Message):
    cursor = connect.cursor()
    cursor.execute(f"UPDATE customers SET phone_number = '{message.contact['phone_number']}' WHERE user_id = {message.from_user.id};")
    connect.commit()
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",reply_markup=inline_button3)

@dp.message_handler(commands='location')
async def get_location(message:types.Message):
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.", reply_markup=loc_button)

@dp.message_handler(content_types=types.ContentType.LOCATION)
async def add_location(message:types.Message):
    address = f"{message.location.longitude}, {message.location.latitude}"
    cursor = connect.cursor()
    cursor.execute(f"INSERT INTO address VALUES ('{message.from_user.id}', '{message.location.longitude}', '{message.location.latitude}');")
    cursor.execute(f"UPDATE orders SET address_destination ='{address}';")
    connect.commit()
    await message.answer("–í–∞—à –∞–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(commands='order')
async def get_order(message:types.Message):
    await message.reply("–ü—Ä–æ—à—É, –º–µ–Ω—é:")

    with open('pizza1.webp', 'rb') as photo1:
        await message.answer_photo(photo1, caption='1. –î–≤–æ–π–Ω–æ–π —Ü—ã–ø–ª–µ–Ω–æ–∫\n\n30 —Å–º, —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ, 520 –≥\n\n–¶–µ–Ω–∞: 325 —Å–æ–º')

    with open('pizza2.webp', 'rb')as photo2:
        await message.answer_photo(photo2, caption='2. –í–µ—Ç—á–∏–Ω–∞ –∏ –≥—Ä–∏–±—ã\n\n30 —Å–º, —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ, 480 –≥\n\n–¶–µ–Ω–∞: 445 —Å–æ–º')

    with open('pizza3.webp', 'rb')as photo3:
        await message.answer_photo(photo3, caption='3. –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ üå±\n\n30 —Å–º, —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ, 636 –≥\n\n–¶–µ–Ω–∞: 445 —Å–æ–º')

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ –º–µ–Ω—é –∏ –º—ã –∑–∞–ø–∏—à–µ–º –≤–∞—à –∑–∞–∫–∞–∑.")



@dp.message_handler(text=[1,2,3])
async def add_order(message:types.Message):
    cursor = connect.cursor()
    if message.text == '1':
        cursor.execute(f"INSERT INTO orders VALUES('{message.from_user.id}', '–î–≤–æ–π–Ω–æ–π —Ü—ã–ø–ª–µ–Ω–æ–∫', '' , '{time.ctime()}');")
    elif message.text == '2':
        cursor.execute(f"INSERT INTO orders VALUES('{message.from_user.id}', '–í–µ—Ç—á–∏–Ω–∞ –∏ –≥—Ä–∏–±—ã', '', '{time.ctime()}');")
    elif message.text == '3':
        cursor.execute(f"INSERT INTO orders VALUES('{message.from_user.id}', '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ üå±', '', '{time.ctime()}');")
    connect.commit()
    await message.reply("–í–∞—à –∑–∞–∫–∞–∑ –∑–∞–ø–∏—Å–∞–Ω. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å",reply_markup=inline_button2)

executor.start_polling(dp)